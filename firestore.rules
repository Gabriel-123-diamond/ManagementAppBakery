
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function getUserData() {
      // Get the data of the currently signed-in user from the 'staff' collection.
      return get(/databases/$(database)/documents/staff/$(request.auth.uid)).data;
    }
    
    function hasRole(roles) {
      // Check if the signed-in user has one of the specified roles.
      return isSignedIn() && getUserData().role in roles;
    }
    
    function isOwner(staffId) {
      // Check if the signed-in user is the owner of the document.
      return isSignedIn() && request.auth.uid == staffId;
    }

    // --- Default Rule: Deny all access unless explicitly allowed ---
    match /{document=**} {
      allow read, write: if false;
    }

    // --- Public read for essential app configuration ---
    match /settings/app_config {
      allow read: if true;
      allow write: if hasRole(['Manager', 'Developer']);
    }
    
    // --- Staff Management ---
    match /staff/{staffId} {
      // Admins can manage all staff documents.
      allow read, create, update: if hasRole(['Manager', 'Developer', 'Supervisor']);
      // Any authenticated user can read their own data.
      allow get: if isOwner(staffId);
      // Users can only update their own non-critical fields.
      allow update: if isOwner(staffId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['password', 'theme', 'bank_name', 'account_number']);
      // No one can delete staff directly; use the 'is_active' flag.
      allow delete: if false;
    }
    
    // --- Personal Stock (Subcollection of Staff) ---
    match /staff/{staffId}/personal_stock/{productId} {
       // Admins can read anyone's stock.
       allow read: if hasRole(['Manager', 'Developer', 'Supervisor']);
       // Staff can read their own stock.
       allow read: if isOwner(staffId);
       // No one can write directly. Must be done via server-side transactions (transfers, sales).
       allow write: if false; 
    }

    // --- Attendance: Staff can only create/update their own records ---
    match /attendance/{docId} {
      allow read: if hasRole(['Manager', 'Developer', 'Supervisor']);
      allow create: if isSignedIn() && request.resource.data.staff_id == request.auth.uid;
      allow update: if isSignedIn() && resource.data.staff_id == request.auth.uid;
    }
    
    // --- Core Inventory ---
    function isInventoryManager() {
      return hasRole(['Manager', 'Developer', 'Storekeeper']);
    }
    
    match /products/{docId} {
       allow read: if isSignedIn();
       allow write: if isInventoryManager();
       allow update: if hasRole(['Accountant']) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['costPrice']);
    }
    match /ingredients/{docId} {
       allow read: if isSignedIn();
       allow write: if isInventoryManager();
    }
     match /other_supplies/{docId} {
       allow read: if isSignedIn();
       allow write: if isInventoryManager();
    }
    match /recipes/{docId} {
       allow read: if isSignedIn();
       allow write: if hasRole(['Manager', 'Developer', 'Chief Baker']);
    }
     match /suppliers/{docId} {
       allow read: if isSignedIn();
       allow write: if hasRole(['Manager', 'Developer', 'Storekeeper', 'Accountant']);
    }
     match /supply_requests/{docId} {
        allow read: if hasRole(['Manager', 'Developer', 'Storekeeper', 'Accountant']);
        allow create: if hasRole(['Storekeeper']);
        allow update: if hasRole(['Manager', 'Developer', 'Accountant']);
     }
      match /ingredient_stock_logs/{docId} {
        allow read: if hasRole(['Manager', 'Developer', 'Storekeeper', 'Accountant']);
        allow create: if isSignedIn();
     }
     
     match /production_logs/{docId} {
        allow read: if hasRole(['Manager', 'Developer', 'Storekeeper', 'Accountant', 'Chief Baker']);
        allow create: if isSignedIn();
     }
    
    // --- Operational Data ---
    match /orders/{orderId} {
      allow read: if hasRole(['Manager', 'Developer', 'Supervisor', 'Accountant', 'Showroom Staff']);
      allow create: if hasRole(['Showroom Staff', 'Delivery Staff']);
    }

    match /transfers/{transferId} {
      allow read: if isSignedIn();
      allow create: if hasRole(['Manager', 'Developer', 'Storekeeper']);
      allow update: if isSignedIn() && resource.data.to_staff_id == request.auth.uid;
    }
    
    match /production_batches/{batchId} {
       allow read: if isSignedIn();
       allow create: if hasRole(['Baker', 'Chief Baker']);
       allow update: if hasRole(['Manager', 'Developer', 'Storekeeper']) || 
                      (hasRole(['Baker', 'Chief Baker']) && request.resource.data.status == 'completed');
    }

    match /waste_logs/{logId} {
      allow read: if hasRole(['Manager', 'Developer', 'Storekeeper']);
      allow create: if isSignedIn();
    }

    match /payment_confirmations/{confirmationId} {
       allow read: if hasRole(['Manager', 'Developer', 'Accountant']);
       allow create: if hasRole(['Delivery Staff']);
       allow update: if hasRole(['Manager', 'Developer', 'Accountant']);
    }
    
    // --- Communication ---
    match /announcements/{docId} {
      allow read: if isSignedIn();
      allow create: if hasRole(['Manager', 'Developer', 'Supervisor']);
    }
    
    match /reports/{docId} {
      allow read: if hasRole(['Manager', 'Developer', 'Supervisor']);
      allow create: if isSignedIn();
      allow update: if hasRole(['Manager', 'Developer', 'Supervisor']);
    }
    
    // --- Accounting Data (Accountant/Admin access) ---
    function isAccountAdmin() {
       return hasRole(['Manager', 'Developer', 'Accountant']);
    }
    match /sales/{docId} { allow read, write: if isAccountAdmin(); }
    match /directCosts/{docId} { allow read, write: if isAccountAdmin(); }
    match /indirectCosts/{docId} { allow read, write: if isAccountAdmin(); }
    match /debt/{docId} { allow read, write: if isAccountAdmin(); }
    match /wages/{docId} { allow read, write: if isAccountAdmin(); }
    match /discount_records/{docId} { allow read, write: if isAccountAdmin(); }
    match /cost_categories/{docId} { allow read, write: if isAccountAdmin(); }
  }
}

    