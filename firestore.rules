
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- HELPER FUNCTIONS ---
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/staff/$(userId)).data;
    }
    
    function hasRole(roles) {
      let userRole = getUserData(request.auth.uid).role;
      return isSignedIn() && userRole in roles;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // --- Role Definitions ---
    function isAdmin() {
      return hasRole(['Manager', 'Developer', 'Supervisor']);
    }
    
    function isAccountant() {
      return hasRole(['Manager', 'Developer', 'Accountant']);
    }
    
    function isStorekeeper() {
       return hasRole(['Manager', 'Developer', 'Storekeeper']);
    }
    
    // --- COLLECTION RULES ---

    // SETTINGS: Public read for login page, admin write
    match /settings/{settingId} {
      allow read;
      allow write: if isAdmin();
    }

    // STAFF: Users can read/update their own non-critical data. Admins can manage all.
    match /staff/{userId} {
      allow read: if isSignedIn();
      allow create: if isAdmin();
      allow update: if (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['password', 'theme'])) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // ATTENDANCE: Users can only create their own records. Admins can read all.
    match /attendance/{attendanceId} {
      allow read: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.staff_id == request.auth.uid;
      allow update: if isSignedIn() && resource.data.staff_id == request.auth.uid; // for clock-out
      allow delete: if isAdmin();
    }

    // INVENTORY (Products, Ingredients, Recipes, Suppliers, Other Supplies)
    match /products/{productId} {
      allow read: if isSignedIn();
      // Only admins and storekeepers can create/delete products or update non-financial info
      allow create, delete: if isStorekeeper();
      allow update: if (isAccountant() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['costPrice', 'price'])) || isStorekeeper();
    }
    
    match /ingredients/{ingredientId} {
        allow read: if isSignedIn();
        // Accountants update cost, storekeepers manage everything else
        allow create, delete: if isStorekeeper();
        allow update: if (isAccountant() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['costPerUnit'])) || isStorekeeper();
    }
    
    match /other_supplies/{supplyId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isStorekeeper();
    }

    match /recipes/{recipeId} {
        allow read: if isSignedIn();
        allow create, update, delete: if hasRole(['Manager', 'Developer', 'Chief Baker']);
    }
    
    match /suppliers/{supplierId} {
        allow read: if isSignedIn();
        allow create, delete: if isStorekeeper();
        allow update: if isAccountant() || isStorekeeper();
    }

    // PRODUCTION WORKFLOW
    match /production_batches/{batchId} {
      allow read: if isSignedIn();
      allow create: if hasRole(['Baker', 'Chief Baker']); // Bakers request
      allow update: if (
        (isStorekeeper() && resource.data.status == 'pending_approval') || // Storekeeper approves
        (hasRole(['Baker', 'Chief Baker']) && resource.data.status == 'in_production') // Baker completes
      );
      allow delete: if isAdmin();
    }
    
    match /supply_requests/{requestId} {
      allow read: if isAccountant() || isStorekeeper();
      allow create: if isStorekeeper();
      allow update: if isAccountant() && resource.data.status == 'pending'; // Accountant approves/declines
      allow delete: if isAdmin();
    }

    // LOGS (Append-only for most users)
    match /waste_logs/{logId} {
      allow read: if hasRole(['Manager', 'Developer', 'Supervisor']);
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }

    match /production_logs/{logId} {
      allow read: if hasRole(['Manager', 'Developer', 'Supervisor', 'Storekeeper', 'Chief Baker']);
      allow create: if isSignedIn();
      allow update, delete: if false; // Logs should be immutable
    }

    match /ingredient_stock_logs/{logId} {
        allow read: if hasRole(['Manager', 'Developer', 'Supervisor', 'Storekeeper', 'Accountant']);
        allow create: if isSignedIn();
        allow update, delete: if false;
    }
    
    // OPERATIONAL DATA (Transfers, Orders)
    match /transfers/{transferId} {
      allow read: if isSignedIn();
      allow create: if isStorekeeper();
      allow update: if isSignedIn() && request.resource.data.to_staff_id == request.auth.uid && resource.data.status == 'pending'; // Recipient acknowledges
      allow delete: if isAdmin();
    }

    match /orders/{orderId} {
      allow read: if hasRole(['Manager', 'Developer', 'Supervisor', 'Showroom Staff', 'Accountant']);
      allow create: if hasRole(['Showroom Staff', 'Delivery Staff']); // Only sales staff can create orders
      allow update, delete: if isAdmin();
    }
    
    // COMMUNICATION
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow create: if hasRole(['Manager', 'Developer', 'Supervisor']);
      allow delete: if isAdmin();
    }
    
    match /reports/{reportId} {
      allow read: if hasRole(['Manager', 'Developer', 'Supervisor']);
      allow create: if isSignedIn();
      allow update: if hasRole(['Manager', 'Developer', 'Supervisor']);
      allow delete: if isAdmin();
    }
    
    // FINANCIALS & PAYMENTS
    match /payment_confirmations/{confirmationId} {
        allow read: if isAccountant();
        allow create: if hasRole(['Delivery Staff']);
        allow update: if isAccountant() && resource.data.status == 'pending';
        allow delete: if isAdmin();
    }

    match /directCosts/{costId} {
        allow read, write: if isAccountant();
    }
    
    match /indirectCosts/{costId} {
        allow read, write: if isAccountant();
    }
    
    match /wages/{wageId} {
      allow read, write: if isAccountant();
    }

    match /sales/{saleId} {
      allow read, write: if isAccountant();
    }
    
    match /debt/{debtId} {
       allow read, write: if isAccountant();
    }
    
    match /discount_records/{recordId} {
      allow read, write: if isAccountant();
    }
    
    match /cost_categories/{categoryId} {
      allow read: if isAccountant();
      allow write: if isAdmin();
    }
  }
}
