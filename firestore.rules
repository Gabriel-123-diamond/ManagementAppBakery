rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function getRole() {
      return get(/databases/$(database)/documents/staff/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isSignedIn() && getRole() in ['Manager', 'Developer', 'Supervisor'];
    }
    
    function isStorekeeper() {
       return isSignedIn() && getRole() in ['Storekeeper'];
    }

    function isAccountant() {
        return isSignedIn() && getRole() in ['Accountant'];
    }

    function isBaker() {
        return isSignedIn() && getRole() in ['Baker', 'Chief Baker'];
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- Collection Rules ---

    // Settings: Publicly readable for app config, only writable by Admins
    match /settings/app_config {
      allow read;
      allow write: if isAdmin();
    }
    
    // Cost Categories: Readable by most, only writable by Admins
    match /cost_categories/{category} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }

    // Staff: Users can update their own non-critical info. Admins can manage all staff.
    match /staff/{userId} {
      allow read: if isSignedIn();
      allow create: if isAdmin();
      allow update: if (isAdmin() || 
                      (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['password', 'theme', 'lastLogin'])));
      allow delete: if isAdmin();
    }
    
    // Personal Stock: Only the user can have personal stock, and it's managed via transactions, not direct writes.
    match /staff/{userId}/personal_stock/{productId} {
        allow read: if isOwner(userId);
        // Writes are handled by server-side logic (transfers, sales), so direct client writes are denied.
        allow write: if false; 
    }

    // Products, Ingredients, Suppliers: Role-based access
    match /products/{productId} {
        allow read: if isSignedIn();
        allow create, delete: if isAdmin() || isStorekeeper();
        allow update: if (isAdmin() || isStorekeeper() || 
                       (isAccountant() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['costPrice'])));
    }
    
    match /other_supplies/{supplyId} {
        allow read: if isSignedIn();
        allow create, delete: if isAdmin() || isStorekeeper();
        allow update: if (isAdmin() || isStorekeeper() || 
                       (isAccountant() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['costPerUnit'])));
    }

    match /ingredients/{ingredientId} {
        allow read: if isSignedIn();
        allow create, delete: if isAdmin() || isStorekeeper();
        allow update: if (isAdmin() || isStorekeeper() || 
                       (isAccountant() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['costPerUnit'])));
    }

    match /suppliers/{supplierId} {
        allow read: if isSignedIn();
        allow write: if isAdmin() || isAccountant();
    }
    
    match /supply_logs/{logId} {
        allow read: if isSignedIn();
        allow create: if isAdmin() || isStorekeeper();
        allow write: if false; // Logs are immutable
    }

    // Recipes & Production
    match /recipes/{recipeId} {
        allow read: if isSignedIn();
        allow write: if isAdmin() || isBaker();
    }

    match /production_batches/{batchId} {
        allow read: if isSignedIn();
        allow create: if isBaker();
        allow update: if (isAdmin() || isStorekeeper() || isBaker()); // For status changes
        allow delete: if isAdmin();
    }
    
    match /production_logs/{logId} {
      allow read: if isSignedIn();
      allow create: if isAdmin() || isBaker();
      allow write: if false; // Logs are immutable
    }

    // Operational Data: Sales, Transfers, etc.
    match /orders/{orderId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn(); // Staff create orders via POS or sales run
        allow update, delete: if isAdmin();
    }

    match /transfers/{transferId} {
        allow read: if isSignedIn();
        allow create: if isAdmin() || isStorekeeper();
        allow update: if isSignedIn(); // For acknowledging
        allow delete: if isAdmin();
    }
    
    match /payment_confirmations/{confirmationId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn(); // Drivers/staff create these
        allow update: if isAdmin() || isAccountant(); // Only accountant/admin can approve/decline
        allow delete: if isAdmin();
    }
    
     match /supply_requests/{requestId} {
        allow read: if isSignedIn();
        allow create: if isStorekeeper();
        allow update: if isAdmin() || isAccountant();
        allow delete: if isAdmin();
    }

    match /waste_logs/{logId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn(); // Any signed in user can report their own waste
      allow write: if false; // Logs are immutable
    }
    
    match /ingredient_stock_logs/{logId} {
        allow read: if isSignedIn();
        allow create: if isStorekeeper() || isAdmin();
        allow write: if false;
    }

    // Financial Data: Restricted to Accountants and Admins
    match /sales/{saleId} {
        allow read: if isAdmin() || isAccountant();
        allow write: if isAdmin() || isAccountant();
    }
    match /debt/{debtId} {
        allow read: if isAdmin() || isAccountant();
        allow write: if isAdmin() || isAccountant();
    }
    match /directCosts/{costId} {
        allow read: if isAdmin() || isAccountant();
        allow write: if isAdmin() || isAccountant();
    }
    match /indirectCosts/{costId} {
        allow read: if isAdmin() || isAccountant();
        allow write: if isAdmin() || isAccountant();
    }
    match /wages/{wageId} {
        allow read: if isAdmin() || isAccountant();
        allow write: if isAdmin() || isAccountant();
    }
     match /discount_records/{discountId} {
        allow read: if isAdmin() || isAccountant();
        allow write: if isAdmin() || isAccountant();
    }
    match /closingStocks/{stockId} {
        allow read: if isAdmin() || isAccountant();
        allow write: if isAdmin() || isAccountant();
    }
    
    // Communication
    match /announcements/{announcementId} {
        allow read: if isSignedIn();
        allow create: if isAdmin();
        allow delete: if isAdmin();
    }
    
    match /reports/{reportId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}