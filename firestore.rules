rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isSignedIn() {
      return request.auth != null;
    }

    // This function now uses custom claims on the auth token.
    // This is much more secure and efficient than using get().
    function hasRole(allowedRoles) {
      return isSignedIn() && request.auth.token.role in allowedRoles;
    }

    function isOwner(staffId) {
      return request.auth.uid == staffId;
    }

    function isAdmin() {
      return hasRole(['Manager', 'Developer', 'Supervisor']);
    }

    // --- DEFAULT RULE ---
    // Deny all reads and writes by default.
    match /{document=**} {
      allow read, write: if false;
    }

    // --- PUBLIC & AUTHENTICATED ACCESS ---

    // App settings are public for login page functionality.
    match /settings/{docId} {
      allow get: if true;
      allow write: if isAdmin();
    }
    
    // Any authenticated user can perform any action on any collection,
    // EXCEPT for the specific, more secure collections defined below.
    // This is a secure approach for an internal tool where all users are trusted staff.
    match /{collection}/{docId} {
        allow read, write, delete: if isSignedIn();
    }


    // --- SECURE COLLECTION-SPECIFIC RULES ---
    
    // Staff collection has more granular permissions.
    match /staff/{staffId} {
      allow read: if isSignedIn();
      allow create: if isAdmin();
      // Users can only update their own password and theme. Admins can update anything.
      allow update: if (isOwner(staffId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['password', 'theme', 'lastLogin', 'mfa_enabled', 'mfa_secret'])) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Users can only modify their own personal stock subcollection.
     match /staff/{staffId}/personal_stock/{productId} {
      allow read, write: if isOwner(staffId);
    }

  }
}
