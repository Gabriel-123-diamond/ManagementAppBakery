rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(staffId) {
      return request.auth.uid == staffId;
    }

    function getRole(staffId) {
        return get(/databases/$(database)/documents/staff/$(staffId)).data.role;
    }

    function hasRole(allowedRoles) {
        return isSignedIn() && getRole(request.auth.uid) in allowedRoles;
    }

    function isAdmin() {
        return hasRole(['Manager', 'Developer', 'Supervisor']);
    }

    // --- DEFAULT RULES ---
    match /{document=**} {
      allow read, write: if false; // Deny all by default
    }

    // --- COLLECTION-SPECIFIC RULES ---

    // Public read for app configuration, write for admins
    match /settings/{docId} {
        allow get: if true;
        allow write: if isAdmin();
        allow delete: if isAdmin();
    }
    
    match /cost_categories/{docId} {
        allow list: if isSignedIn();
        allow write, delete: if isAdmin();
    }
    
    match /staff/{staffId} {
      allow read: if isSignedIn();
      allow create: if isAdmin();
      // Users can update their own non-critical info. Admins can update anything.
      allow update: if (isOwner(staffId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['password', 'theme', 'lastLogin'])) || isAdmin();
      allow delete: if isAdmin();
    }
    
    match /staff/{staffId}/{subcollection}/{docId} {
        allow read, write: if isOwner(staffId);
    }
    
    match /products/{productId} {
      allow read: if isSignedIn();
      // Allow only specific roles to create/update.
      allow create: if hasRole(['Manager', 'Supervisor', 'Storekeeper', 'Developer']);
      // Allow Accountant to update only financial fields. Storekeeper/Admins can update anything.
      allow update: if (hasRole(['Accountant']) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['costPrice', 'price'])) || hasRole(['Manager', 'Supervisor', 'Storekeeper', 'Developer']);
      allow delete: if isAdmin();
    }
    
    match /ingredients/{ingredientId} {
      allow read: if isSignedIn();
      allow create, update: if hasRole(['Manager', 'Supervisor', 'Storekeeper', 'Developer', 'Accountant']);
      allow delete: if isAdmin();
    }

    match /recipes/{recipeId} {
      allow read: if isSignedIn();
      allow write: if hasRole(['Manager', 'Supervisor', 'Developer']);
      allow delete: if isAdmin();
    }

    match /suppliers/{supplierId} {
      allow read: if isSignedIn();
      allow write: if hasRole(['Manager', 'Supervisor', 'Storekeeper', 'Developer', 'Accountant']);
      allow delete: if isAdmin();
    }
    
    match /other_supplies/{supplyId} {
      allow read: if isSignedIn();
      allow write: if hasRole(['Manager', 'Supervisor', 'Storekeeper', 'Developer', 'Accountant']);
      allow delete: if isAdmin();
    }

    match /customers/{customerId} {
      allow read: if isSignedIn();
      allow create, update: if hasRole(['Manager', 'Supervisor', 'Developer', 'Showroom Staff', 'Delivery Staff']);
      allow delete: if isAdmin();
    }

    match /orders/{orderId} {
      allow read: if isSignedIn();
      // Allow sales staff to create orders
      allow create: if hasRole(['Manager', 'Supervisor', 'Showroom Staff', 'Delivery Staff', 'Developer']);
      // Only admins can update/delete historical order records
      allow update, delete: if isAdmin();
    }
    
    match /promotions/{promoId} {
        allow list: if isSignedIn();
        allow create, update: if hasRole(['Manager', 'Supervisor', 'Developer']);
        allow delete: if isAdmin();
    }
    
    match /directCosts/{costId} {
      allow read, write: if hasRole(['Accountant', 'Manager', 'Developer']);
      allow delete: if isAdmin();
    }

    match /indirectCosts/{costId} {
        allow read, write: if hasRole(['Accountant', 'Manager', 'Developer']);
        allow delete: if isAdmin();
    }
    
    match /wages/{wageId} {
        allow read, write: if hasRole(['Accountant', 'Manager', 'Developer']);
        allow delete: if isAdmin();
    }
    
    match /sales/{saleId} {
        allow read, write: if hasRole(['Accountant', 'Manager', 'Developer']);
        allow delete: if isAdmin();
    }
    
    match /debt/{debtId} {
        allow read, write: if hasRole(['Accountant', 'Manager', 'Developer']);
        allow delete: if isAdmin();
    }
    
    match /discount_records/{recordId} {
        allow read: if hasRole(['Accountant', 'Manager', 'Developer']);
        allow delete: if isAdmin();
    }
    
    match /closingStocks/{stockId} {
        allow read: if hasRole(['Accountant', 'Manager', 'Developer']);
        allow delete: if isAdmin();
    }
    
    match /supply_requests/{requestId} {
      // Storekeepers can create.
      allow create: if hasRole(['Storekeeper']);
      // Accountants & Admins can read & update (to approve/decline).
      allow read, update: if hasRole(['Accountant', 'Manager', 'Developer']);
      allow delete: if isAdmin();
    }
    
    match /payment_confirmations/{confirmationId} {
        // Delivery staff create these.
        allow create: if hasRole(['Delivery Staff']);
        // Accountants and admins can read and update them.
        allow read, update: if hasRole(['Accountant', 'Manager', 'Developer']);
        allow delete: if isAdmin();
    }

    match /transfers/{transferId} {
        allow read: if isSignedIn();
        // Admins/Storekeeper can initiate transfers.
        allow create: if hasRole(['Manager', 'Supervisor', 'Storekeeper', 'Developer']);
        // The recipient can update to acknowledge.
        allow update: if isSignedIn() && (resource.data.to_staff_id == request.auth.uid || hasRole(['Manager', 'Developer']));
        allow delete: if isAdmin();
    }
    
    match /production_batches/{batchId} {
        allow read: if isSignedIn();
        // Bakers can create batches.
        allow create: if hasRole(['Baker', 'Chief Baker', 'Bakery Assistant']);
        // Storekeepers/Admins approve, Bakers complete.
        allow update: if hasRole(['Storekeeper', 'Manager', 'Developer']) || (hasRole(['Baker', 'Chief Baker']) && resource.data.status == 'in_production');
        allow delete: if isAdmin();
    }

    match /waste_logs/{logId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn(); // Any signed-in user can report waste
      allow delete: if isAdmin();
    }
    
    match /attendance/{attId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if (isSignedIn() && resource.data.staff_id == request.auth.uid) || isAdmin();
      allow delete: if isAdmin();
    }
    
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow create: if hasRole(['Manager', 'Supervisor', 'Developer']);
      allow delete: if isAdmin();
    }
    
    match /reports/{reportId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin(); // Only admins can change status
      allow delete: if isAdmin();
    }
    
    match /production_logs/{logId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow delete: if isAdmin();
    }

    match /ingredient_stock_logs/{logId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow delete: if isAdmin();
    }
  }
}