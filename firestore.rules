
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getRole(userId) {
      return get(/databases/$(database)/documents/staff/$(userId)).data.role;
    }

    function hasRole(allowedRoles) {
      return isSignedIn() && getRole(request.auth.uid) in allowedRoles;
    }

    function isAdmin() {
      return hasRole(['Manager', 'Developer', 'Supervisor']);
    }

    function isAccountant() {
      return hasRole(['Accountant']);
    }

    function isStorekeeper() {
        return hasRole(['Storekeeper']);
    }

    function isBaker() {
        return hasRole(['Baker', 'Chief Baker']);
    }

    // --- Collection Rules ---

    // STAFF: Users can read their own data. Admins can manage all staff.
    match /staff/{userId} {
      allow read: if isSignedIn();
      allow create: if isAdmin();
      allow update: if (isAdmin() || 
        (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['password', 'theme', 'lastLogin', 'mfa_enabled', 'mfa_secret']))
      );
      allow delete: if isAdmin();
    }

    // SETTINGS: Public read for login config, but only Admins can write.
    match /settings/app_config {
        allow read: if true;
        allow write: if isAdmin();
    }

    // PRODUCTS, INGREDIENTS, RECIPES, SUPPLIERS: Managed by specific roles.
    match /products/{productId} {
      allow read: if isSignedIn();
      allow create, delete: if isAdmin() || isStorekeeper();
      allow update: if (isAdmin() || isStorekeeper() ||
        // Accountant can only update cost price
        (isAccountant() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['costPrice']))
      );
    }

    match /recipes/{recipeId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin() || hasRole(['Chief Baker']);
    }

    match /ingredients/{ingredientId} {
      allow read: if isSignedIn();
      allow create, delete: if isAdmin() || isStorekeeper();
      allow update: if (isAdmin() || isStorekeeper() ||
        (isAccountant() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['costPerUnit']))
      );
    }

    match /suppliers/{supplierId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin() || isAccountant();
    }
    
    match /other_supplies/{supplyId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin() || isStorekeeper();
    }
    
    match /cost_categories/{categoryId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin() || isAccountant();
    }
    
    // SUPPLY REQUESTS: Storekeepers create, Accountants/Admins approve.
    match /supply_requests/{requestId} {
        allow read: if isAdmin() || isAccountant() || isStorekeeper();
        allow create: if isStorekeeper() && request.resource.data.requesterId == request.auth.uid;
        allow update: if (isAccountant() || isAdmin()) && request.resource.data.status != resource.data.status;
        allow delete: if isAdmin();
    }

    // OPERATIONAL DATA: Tightly controlled based on role actions.
    match /orders/{orderId} {
      allow read: if isSignedIn();
      // Only staff in the showroom can create a direct POS order
      // Sales run orders are created via transactions secured by other rules.
      allow create: if hasRole(['Showroom Staff']) && request.resource.data.staffId == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    match /transfers/{transferId} {
      allow read: if isSignedIn();
      // Storekeepers or Admins can initiate.
      allow create: if (isAdmin() || isStorekeeper()) && request.resource.data.from_staff_id == request.auth.uid;
      // Only the recipient can acknowledge/update status.
      allow update: if isSignedIn() && request.resource.data.to_staff_id == request.auth.uid;
      allow delete: if isAdmin();
    }

    match /production_batches/{batchId} {
      allow read: if isSignedIn();
      allow create: if isBaker() && request.resource.data.requestedById == request.auth.uid;
      // Only storekeepers/admins can approve. Only originating baker can complete.
      allow update: if (
        (isStorekeeper() || isAdmin()) || 
        (isBaker() && request.resource.data.requestedById == request.auth.uid && request.resource.data.status == 'completed')
      );
      allow delete: if isAdmin();
    }
    
    match /payment_confirmations/{confirmationId} {
        allow read: if isSignedIn();
        allow create: if hasRole(['Delivery Staff']); // Only drivers can submit cash for approval
        allow update: if isAdmin() || isAccountant(); // Only admins/accountants can approve/decline
        allow delete: if isAdmin();
    }

    // LOGS & RECORDS: Users can create their own logs. Admins can read all.
    match /attendance/{attendanceId} {
        allow read: if isAdmin();
        allow create: if isSignedIn() && request.resource.data.staff_id == request.auth.uid;
        allow update: if isOwner(resource.data.staff_id);
    }
    
    match /waste_logs/{logId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.staffId == request.auth.uid;
        allow delete: if isAdmin();
    }

    match /ingredient_stock_logs/{logId} {
        allow read: if isAdmin() || isStorekeeper() || isAccountant();
        allow create: if isStorekeeper() || isBaker() || isAdmin(); // Created via transactions mostly
    }

    match /production_logs/{logId} {
        allow read: if isSignedIn();
        allow create: if isBaker() || isStorekeeper() || isAdmin();
    }

    // COMMUNICATION: All staff can read announcements and create reports. Admins manage.
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow create: if hasRole(['Manager', 'Developer', 'Supervisor']);
      allow delete: if isAdmin();
    }

    match /reports/{reportId} {
      allow read: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.staffId == request.auth.uid;
      allow update: if isAdmin();
    }

    // FINANCIAL RECORDS: Read by admins/accountants, written to by specific server actions.
    // We make them writeable by admins/accountants for manual adjustments.
    match /sales/{saleId} {
      allow read: if isAdmin() || isAccountant();
      allow create, update: if isAdmin() || isAccountant();
    }
    
    match /debt/{debtId} {
        allow read: if isAdmin() || isAccountant();
        allow create, update: if isAdmin() || isAccountant();
    }

    match /directCosts/{costId} {
        allow read: if isAdmin() || isAccountant();
        allow create, update: if isAdmin() || isAccountant();
    }

    match /indirectCosts/{costId} {
        allow read: if isAdmin() || isAccountant();
        allow create, update: if isAdmin() || isAccountant();
    }

    match /wages/{wageId} {
        allow read: if isAdmin() || isAccountant();
        allow create, update: if isAdmin() || isAccountant();
    }
    
    match /discount_records/{recordId} {
        allow read: if isAdmin() || isAccountant();
        allow create, update, delete: if isAdmin() || isAccountant();
    }

    // Block access to everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
